<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bo Yu</title><link href="http://yubo.info/" rel="alternate"></link><link href="http://yubo.info/feeds/all.atom.xml" rel="self"></link><id>http://yubo.info/</id><updated>2013-09-13T00:00:00-07:00</updated><entry><title>Pelican Workflow</title><link href="http://yubo.info/article/pelican-workflow/" rel="alternate"></link><updated>2013-09-13T00:00:00-07:00</updated><author><name>Bo Yu</name></author><id>tag:yubo.info,2013-09-13:article/pelican-workflow/</id><summary type="html">&lt;h1&gt;Preparation&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Crate a virtual environment for Pelican via &lt;code&gt;virtualenv&lt;/code&gt; before installing&amp;nbsp;Pelican&lt;/li&gt;
&lt;li&gt;Once the virtual environment has been created and activated, Pelican can be be installed via &lt;code&gt;pip install pelican&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install additional dependencies: &lt;code&gt;pip install Markdown typogrify&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once Pelican has been installed, you can create a source project via the &lt;code&gt;pelican-quickstart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Prepare two GitHub repositories, one for source project (origin) and one for user pages&amp;nbsp;(userpage)&lt;/li&gt;
&lt;li&gt;Add the source project to the origin&amp;nbsp;repository&lt;/li&gt;
&lt;li&gt;Use ghp-import (installed via &lt;code&gt;pip install ghp-import&lt;/code&gt;) to push the content of the output dir generated by Pelican to the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;Push the source project&amp;#8217;s &lt;code&gt;gh-pages&lt;/code&gt; branch to the &lt;code&gt;master&lt;/code&gt; branch of &lt;username&gt;.github.com repository on&amp;nbsp;GitHub.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Writing/Publishing&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Pull the source project from&amp;nbsp;origin&lt;/li&gt;
&lt;li&gt;Activate the virtual environment for&amp;nbsp;Pelican &lt;/li&gt;
&lt;li&gt;Start the local web server and monitor content changes via &lt;code&gt;make devserver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add/write content under &lt;code&gt;content&lt;/code&gt; dir&lt;/li&gt;
&lt;li&gt;Once done testing changes, stop the development server via &lt;code&gt;./develop_server.sh stop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Publish the changes to user pages via &lt;code&gt;make github&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Push the changes to source&amp;nbsp;project&lt;/li&gt;
&lt;/ol&gt;</summary><category term="website"></category><category term="pelican"></category><category term="python"></category></entry><entry><title>Test with reveal.js</title><link href="http://yubo.info/article/test-slides/" rel="alternate"></link><updated>2013-03-24T16:30:00-07:00</updated><author><name>Bo Yu</name></author><id>tag:yubo.info,2013-03-24:article/test-slides/</id><summary type="html">
        &lt;section&gt;
            &lt;h1&gt;Reveal.js&lt;/h1&gt;
            &lt;h3&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; Presentations Made&amp;nbsp;Easy&lt;/h3&gt;
            &lt;p&gt;
                &lt;small&gt;Created by &lt;a href="http://hakim.se"&gt;Hakim El Hattab&lt;/a&gt; / &lt;a href="http://twitter.com/hakimel"&gt;@hakimel&lt;/a&gt;&lt;/small&gt;
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Heads&amp;nbsp;Up&lt;/h2&gt;
            &lt;p&gt;
                reveal.js is a framework for easily creating beautiful presentations using &lt;span class="caps"&gt;HTML&lt;/span&gt;. You&amp;#8217;ll need a browser with
                support for &lt;span class="caps"&gt;CSS&lt;/span&gt; 3D transforms to see it in its full&amp;nbsp;glory.
            &lt;/p&gt;

            &lt;aside class="notes"&gt;
                Oh hey, these are some notes. They&amp;#8217;ll be hidden in your presentation, but you can see them if you open the speaker notes window (hit &amp;#8216;s&amp;#8217; on your keyboard).
            &lt;/aside&gt;
        &lt;/section&gt;

        &lt;!-- Example of nested vertical slides --&gt;
        &lt;section&gt;
            &lt;section&gt;
                &lt;h2&gt;Vertical&amp;nbsp;Slides&lt;/h2&gt;
                &lt;p&gt;
                    Slides can be nested inside of other slides,
                    try pressing &lt;a href="#" class="navigate-down"&gt;down&lt;/a&gt;.
                &lt;/p&gt;
                &lt;a href="#" class="image navigate-down"&gt;
                    &lt;img width="178" height="238" src="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" alt="Down arrow"&gt;
                &lt;/a&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Basement Level&amp;nbsp;1&lt;/h2&gt;
                &lt;p&gt;Press down or up to&amp;nbsp;navigate.&lt;/p&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Basement Level&amp;nbsp;2&lt;/h2&gt;
                &lt;p&gt;Cornify&lt;/p&gt;
                &lt;a class="test" href="http://cornify.com"&gt;
                    &lt;img width="280" height="326" src="https://s3.amazonaws.com/hakim-static/reveal-js/cornify.gif" alt="Unicorn"&gt;
                &lt;/a&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Basement Level&amp;nbsp;3&lt;/h2&gt;
                &lt;p&gt;That&amp;#8217;s it, time to go back&amp;nbsp;up.&lt;/p&gt;
                &lt;a href="#/2" class="image"&gt;
                    &lt;img width="178" height="238" src="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" alt="Up arrow" style="-webkit-transform: rotate(180deg);"&gt;
                &lt;/a&gt;
            &lt;/section&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Slides&lt;/h2&gt;
            &lt;p&gt;
                Not a coder? No problem. There&amp;#8217;s a fully-featured visual editor for authoring these, try it out at &lt;a href="http://slid.es" target="_blank"&gt;http://slid.es&lt;/a&gt;.
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Point of&amp;nbsp;View&lt;/h2&gt;
            &lt;p&gt;
                Press &lt;strong&gt;&lt;span class="caps"&gt;ESC&lt;/span&gt;&lt;/strong&gt; to enter the slide&amp;nbsp;overview.
            &lt;/p&gt;
            &lt;p&gt;
                Hold down alt and click on any element to zoom in on it using &lt;a href="http://lab.hakim.se/zoom-js"&gt;zoom.js&lt;/a&gt;. Alt + click anywhere to zoom back&amp;nbsp;out.
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Works in Mobile&amp;nbsp;Safari&lt;/h2&gt;
            &lt;p&gt;
                Try it out! You can swipe through the slides and pinch your way to the&amp;nbsp;overview.
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Marvelous Unordered&amp;nbsp;List&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;No order&amp;nbsp;here&lt;/li&gt;
                &lt;li&gt;Or&amp;nbsp;here&lt;/li&gt;
                &lt;li&gt;Or&amp;nbsp;here&lt;/li&gt;
                &lt;li&gt;Or&amp;nbsp;here&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Fantastic Ordered&amp;nbsp;List&lt;/h2&gt;
            &lt;ol&gt;
                &lt;li&gt;One is smaller&amp;nbsp;than&amp;#8230;&lt;/li&gt;
                &lt;li&gt;Two is smaller&amp;nbsp;than&amp;#8230;&lt;/li&gt;
                &lt;li&gt;Three!&lt;/li&gt;
            &lt;/ol&gt;
        &lt;/section&gt;

        &lt;section data-markdown&gt;
            &lt;script type="text/template"&gt;
                ## Markdown support

                For those of you who like that sort of thing. Instructions and a bit more info available [here](https://github.com/hakimel/reveal.js#markdown).

                ```
                &lt;section data-markdown&gt;
                  ## Markdown support

                  For those of you who like that sort of thing.
                  Instructions and a bit more info available [here](https://github.com/hakimel/reveal.js#markdown).
                &lt;/section&gt;
                ```
            &lt;/script&gt;
        &lt;/section&gt;

        &lt;section id="transitions"&gt;
            &lt;h2&gt;Transition&amp;nbsp;Styles&lt;/h2&gt;
            &lt;p&gt;
                You can select from different transitions, like: &lt;br&gt;
                &lt;a href="?transition=cube#/transitions"&gt;Cube&lt;/a&gt; -
                &lt;a href="?transition=page#/transitions"&gt;Page&lt;/a&gt; -
                &lt;a href="?transition=concave#/transitions"&gt;Concave&lt;/a&gt; -
                &lt;a href="?transition=zoom#/transitions"&gt;Zoom&lt;/a&gt; -
                &lt;a href="?transition=linear#/transitions"&gt;Linear&lt;/a&gt; -
                &lt;a href="?transition=fade#/transitions"&gt;Fade&lt;/a&gt; -
                &lt;a href="?transition=none#/transitions"&gt;None&lt;/a&gt; -
                &lt;a href="?#/transitions"&gt;Default&lt;/a&gt;
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;section id="themes"&gt;
            &lt;h2&gt;Themes&lt;/h2&gt;
            &lt;p&gt;
                Reveal.js comes with a few themes built in: &lt;br&gt;
                &lt;a href="?theme=sky#/themes"&gt;Sky&lt;/a&gt; -
                &lt;a href="?theme=beige#/themes"&gt;Beige&lt;/a&gt; -
                &lt;a href="?theme=simple#/themes"&gt;Simple&lt;/a&gt; -
                &lt;a href="?theme=serif#/themes"&gt;Serif&lt;/a&gt; -
                &lt;a href="?theme=night#/themes"&gt;Night&lt;/a&gt; -
                &lt;a href="?#/themes"&gt;Default&lt;/a&gt;
            &lt;/p&gt;
            &lt;p&gt;
                &lt;small&gt;
                    * Theme demos are loaded after the presentation which leads to flicker. In production you should load your theme in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; using a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;.
                &lt;/small&gt;
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Global&amp;nbsp;State&lt;/h2&gt;
            &lt;p&gt;
                Set &lt;code&gt;data-state="something"&lt;/code&gt; on a slide and &lt;code&gt;"something"&lt;/code&gt;
                will be added as a class to the document element when the slide is open. This lets you
                apply broader style changes, like switching the&amp;nbsp;background.
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;section data-state="customevent"&gt;
            &lt;h2&gt;Custom&amp;nbsp;Events&lt;/h2&gt;
            &lt;p&gt;
                Additionally custom events can be triggered on a per slide basis by binding to the &lt;code&gt;data-state&lt;/code&gt; name.
            &lt;/p&gt;
            &lt;pre&gt;&lt;code data-trim contenteditable style="font-size: 18px; margin-top: 20px;"&gt;
Reveal.addEventListener( 'customevent', function() {
console.log( '"customevent" has fired' );
} );
            &lt;/code&gt;&lt;/pre&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;section data-background="#007777"&gt;
                &lt;h2&gt;Slide&amp;nbsp;Backgrounds&lt;/h2&gt;
                &lt;p&gt;
                    Set &lt;code&gt;data-background="#007777"&lt;/code&gt; on a slide to change the full page background to the given color. All &lt;span class="caps"&gt;CSS&lt;/span&gt; color formats are&amp;nbsp;supported.
                &lt;/p&gt;
                &lt;a href="#" class="image navigate-down"&gt;
                    &lt;img width="178" height="238" src="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" alt="Down arrow"&gt;
                &lt;/a&gt;
            &lt;/section&gt;
            &lt;section data-background="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png"&gt;
                &lt;h2&gt;Image&amp;nbsp;Backgrounds&lt;/h2&gt;
                &lt;pre&gt;&lt;code&gt;&amp;lt;section data-background="image.png"&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;/section&gt;
            &lt;section data-background="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" data-background-repeat="repeat" data-background-size="100px"&gt;
                &lt;h2&gt;Repeated Image&amp;nbsp;Backgrounds&lt;/h2&gt;
                &lt;pre&gt;&lt;code style="word-wrap: break-word;"&gt;&amp;lt;section data-background="image.png" data-background-repeat="repeat" data-background-size="100px"&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;/section&gt;
        &lt;/section&gt;

        &lt;section data-transition="linear" data-background="#4d7e65" data-background-transition="slide"&gt;
            &lt;h2&gt;Background&amp;nbsp;Transitions&lt;/h2&gt;
            &lt;p&gt;
                Pass reveal.js the &lt;code&gt;backgroundTransition: 'slide'&lt;/code&gt; config argument to make backgrounds slide rather than&amp;nbsp;fade.
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;section data-transition="linear" data-background="#8c4738" data-background-transition="slide"&gt;
            &lt;h2&gt;Background Transition&amp;nbsp;Override&lt;/h2&gt;
            &lt;p&gt;
                You can override background transitions per slide by using &lt;code&gt;data-background-transition="slide"&lt;/code&gt;.
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Clever&amp;nbsp;Quotes&lt;/h2&gt;
            &lt;p&gt;
                These guys come in two forms, inline: &lt;q cite="http://searchservervirtualization.techtarget.com/definition/Our-Favorite-Technology-Quotations"&gt;
                &amp;ldquo;The nice thing about standards is that there are so many to choose from&amp;rdquo;&lt;/q&gt; and&amp;nbsp;block:
            &lt;/p&gt;
            &lt;blockquote cite="http://searchservervirtualization.techtarget.com/definition/Our-Favorite-Technology-Quotations"&gt;
                &amp;ldquo;For years there has been a theory that millions of monkeys typing at random on millions of typewriters would
                reproduce the entire works of Shakespeare. The Internet has proven this theory to be untrue.&amp;rdquo;
            &lt;/blockquote&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Pretty&amp;nbsp;Code&lt;/h2&gt;
            &lt;pre&gt;&lt;code data-trim contenteditable&gt;
function linkify( selector ) {
if( supports3DTransforms ) {

var nodes = document.querySelectorAll( selector );

for( var i = 0, len = nodes.length; i &amp;lt; len; i++ ) {
var node = nodes[i];

if( !node.className ) ) {
node.className += ' roll';
}
};
}
}
            &lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;Courtesy of &lt;a href="http://softwaremaniacs.org/soft/highlight/en/description/"&gt;highlight.js&lt;/a&gt;.&lt;/p&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Intergalactic&amp;nbsp;Interconnections&lt;/h2&gt;
            &lt;p&gt;
                You can link between slides internally,
                &lt;a href="#/2/3"&gt;like this&lt;/a&gt;.
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;section&gt;
                &lt;h2&gt;Fragmented&amp;nbsp;Views&lt;/h2&gt;
                &lt;p&gt;Hit the next&amp;nbsp;arrow&amp;#8230;&lt;/p&gt;
                &lt;p class="fragment"&gt;&amp;#8230; to step through&amp;nbsp;&amp;#8230;&lt;/p&gt;
                &lt;ol&gt;
                    &lt;li class="fragment"&gt;&lt;code&gt;any type&lt;/code&gt;&lt;/li&gt;
                    &lt;li class="fragment"&gt;&lt;em&gt;of&amp;nbsp;view&lt;/em&gt;&lt;/li&gt;
                    &lt;li class="fragment"&gt;&lt;strong&gt;fragments&lt;/strong&gt;&lt;/li&gt;
                &lt;/ol&gt;

                &lt;aside class="notes"&gt;
                    This slide has fragments which are also stepped through in the notes window.
                &lt;/aside&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Fragment&amp;nbsp;Styles&lt;/h2&gt;
                &lt;p&gt;There&amp;#8217;s a few styles of fragments,&amp;nbsp;like:&lt;/p&gt;
                &lt;p class="fragment grow"&gt;grow&lt;/p&gt;
                &lt;p class="fragment shrink"&gt;shrink&lt;/p&gt;
                &lt;p class="fragment roll-in"&gt;roll-in&lt;/p&gt;
                &lt;p class="fragment fade-out"&gt;fade-out&lt;/p&gt;
                &lt;p class="fragment highlight-red"&gt;highlight-red&lt;/p&gt;
                &lt;p class="fragment highlight-green"&gt;highlight-green&lt;/p&gt;
                &lt;p class="fragment highlight-blue"&gt;highlight-blue&lt;/p&gt;
            &lt;/section&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Spectacular&amp;nbsp;image!&lt;/h2&gt;
            &lt;a class="image" href="http://lab.hakim.se/meny/" target="_blank"&gt;
                &lt;img width="320" height="299" src="http://s3.amazonaws.com/hakim-static/portfolio/images/meny.png" alt="Meny"&gt;
            &lt;/a&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Export to&amp;nbsp;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/h2&gt;
            &lt;p&gt;Presentations can be &lt;a href="https://github.com/hakimel/reveal.js#pdf-export"&gt;exported to &lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;, below is an example that&amp;#8217;s been uploaded to&amp;nbsp;SlideShare.&lt;/p&gt;
            &lt;iframe id="slideshare" src="http://www.slideshare.net/slideshow/embed_code/13872948" width="455" height="356" style="margin:0;overflow:hidden;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen&gt; &lt;/iframe&gt;
            &lt;script&gt;
                document.getElementById('slideshare').attributeName = 'allowfullscreen';
            &lt;/script&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Take a&amp;nbsp;Moment&lt;/h2&gt;
            &lt;p&gt;
                Press b or period on your keyboard to enter the &amp;#8216;paused&amp;#8217; mode. This mode is helpful when you want to take distracting slides off the screen
                during a&amp;nbsp;presentation.
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h2&gt;Stellar&amp;nbsp;Links&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href="http://slid.es"&gt;Try the online&amp;nbsp;editor&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="https://github.com/hakimel/reveal.js"&gt;Source code on&amp;nbsp;GitHub&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="http://twitter.com/hakimel"&gt;Follow me on&amp;nbsp;Twitter&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h1&gt;&lt;span class="caps"&gt;THE&lt;/span&gt;&amp;nbsp;&lt;span class="caps"&gt;END&lt;/span&gt;&lt;/h1&gt;
            &lt;h3&gt;&lt;span class="caps"&gt;BY&lt;/span&gt; Hakim El Hattab /&amp;nbsp;hakim.se&lt;/h3&gt;
        &lt;/section&gt;
    </summary><category term="reveal.js"></category></entry><entry><title>Random point picking inside an arbitrary polygon</title><link href="http://yubo.info/article/random-point-picking/" rel="alternate"></link><updated>2012-03-24T16:30:00-07:00</updated><author><name>Bo Yu</name></author><id>tag:yubo.info,2012-03-24:article/random-point-picking/</id><summary type="html">&lt;p&gt;I come across the problem of randomly generating geographic locations (as points) inside a certain area (as polygons) for a simulation project. A simple solution is to generate and test random points until one is inside the polygon, which is really unpredictable of the time it takes. The solution here is based on &lt;a href="http://stackoverflow.com/questions/240778/random-points-inside-a-polygon"&gt;a post on Stack Overflow&lt;/a&gt;, aiming to generate a point from a uniform distribution within an arbitrary (convex) polygon. This is achieved in a few&amp;nbsp;steps:&lt;/p&gt;
&lt;h1&gt;Step&amp;nbsp;1&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Polygon_triangulation"&gt;Triangulate the polygon&lt;/a&gt; i.e. find the set of triangles with pairwise non-intersecting interiors whose union is the whole polygon. An easy-to-use open source library (poly2tri) for doing polygon triangulation can be found at &lt;a href="http://code.google.com/p/poly2tri/"&gt;here&lt;/a&gt;. It follows the sweep-line algorithm for constrained Delaunay&amp;nbsp;triangulation.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Polygon triangulation" src="http://www.geom.uiuc.edu/~samuelp/final_delaunay.gif" /&gt;&lt;/p&gt;
&lt;h1&gt;Step&amp;nbsp;2&lt;/h1&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;Pick one of the triangles randomly. The probability of a triangle getting picked equals to the area ratio between each triangle and the whole polygon. Each triangle is stored as a two-element tuple: the first element stores the coordinates, and the second is the area ratio as the weight. Then the randomly picking a triangle can be done by calling the following &lt;code&gt;pick_triangle&lt;/code&gt;function.
    {% codeblock Pick triangles randomly lang:python %}
    import random
    def pick_triangle(triangles):
        p = random.uniform(0.0, 1.0)
        for triangle, weight in triangles:
            if p &amp;lt; weight:
                break
            p = p - weight
        return&amp;nbsp;triangle&lt;/p&gt;
&lt;h1&gt;Step&amp;nbsp;3&lt;/h1&gt;
&lt;p&gt;Randomly pick a point inside the chosen triangle, following &lt;a href="http://mathworld.wolfram.com/TrianglePointPicking.html"&gt;the description on Mathworld&lt;/a&gt;. Let &lt;code&gt;v0&lt;/code&gt;, &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt; be vertices of the triangle, represented by their coordinates, so that &lt;code&gt;v0 = (x0,y0)&lt;/code&gt;, etc. Then we generate two random numbers &lt;code&gt;p0&lt;/code&gt; and &lt;code&gt;p1&lt;/code&gt;, both drawn uniformly from the interval &lt;code&gt;[0,1]&lt;/code&gt;. Then we calculate the coordinate of the random point &lt;code&gt;v&lt;/code&gt; by &lt;code&gt;v = v0 + p0*(v1-v0) + p1*(v2-v0)&lt;/code&gt;. &lt;br /&gt; Note that with probability of &lt;code&gt;0.5&lt;/code&gt;, &lt;code&gt;v&lt;/code&gt; lies outside the triangle. Whether &lt;code&gt;v&lt;/code&gt; lies inside or outside the triangle can be easily tested: if &lt;code&gt;p0 + p1 &amp;gt; 1&lt;/code&gt;, then &lt;code&gt;v&lt;/code&gt; is outside the triangle (See the discussion &lt;a href="http://www.blackpawn.com/texts/pointinpoly/default.html"&gt;here&lt;/a&gt;). In that case, we can generate a new point &lt;code&gt;v'&lt;/code&gt; by &lt;code&gt;v' = v0 + (1-p0)*(v1-v0) + (1-p1)*(v2-v0)&lt;/code&gt;, which will be inside the&amp;nbsp;triangle.&lt;/p&gt;</summary><category term="algorithm"></category></entry></feed>